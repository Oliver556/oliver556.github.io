<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>H5适配iPhoneX</title>
    <url>/2019/10/23/H5%E9%80%82%E9%85%8DiPhoneX/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&ensp;&ensp;<a href="http://www.yyyweb.com/tag/iphonex" target="_blank" rel="noopener">iPhoneX</a> 取消了物理按键，改成底部小黑条，这一改动导致网页出现了比较尴尬的屏幕适配问题。对于网页而言，顶部（刘海部位）的适配问题浏览器已经做了处理，所以我们只需要关注底部与小黑条的适配问题即可（即常见的吸底导航、返回顶部等各种相对底部 fixed 定位的元素）。</p>
<a id="more"></a>

<p>&ensp;&ensp;笔者通过查阅了一些官方文档，以及结合实际项目中的一些处理经验，整理了一套简单的适配方案分享给大家，希望对大家有所帮助，以下是处理前后效果图：</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/2/16cf0da345561e8c?w=1000&h=1000&f=png&s=121748" alt=" "></p>
<p>&ensp;&ensp;大家都知道，iphoneX，屏幕顶部都有一个齐刘海，iPhoneX 取消了物理按键，改成底部小黑条，如果不做适配，这些地方就会被遮挡，因此本文讲述下齐刘海与底部小黑条的适配方法。</p>
<h2 id="几个新概念"><a href="#几个新概念" class="headerlink" title="几个新概念"></a>几个新概念</h2><h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><p>&ensp;&ensp;安全区域指的是一个可视窗口范围，处于安全区域的内容不受圆角<font color=red>（corners）</font>、齐刘海<font color=red>（sensor housing）</font>、小黑条<font color=red>（Home Indicator）</font>影响，如下图所示：</p>
<p><img src="https://user-gold-cdn.xitu.io/2019/9/2/16cf0b44836b8969?w=1594&h=784&f=png&s=109849" alt=" "></p>
<h3 id="viewport-fit"><a href="#viewport-fit" class="headerlink" title="viewport-fit"></a>viewport-fit</h3><blockquote>
<p>iOS11 新增特性，苹果公司为了适配 iPhoneX 对现有 <code>viewport meta</code> 标签的一个扩展，用于设置网页在可视窗口的布局方式，可设置 <font color=red><strong>三个值</strong></font>：</p>
</blockquote>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>默认值，跟 <code>contain</code> 表现一致。页面内容显示在safe area内。<code>viewprot-fit:auto</code>等同于<code>viewport-fit:contain</code></td>
</tr>
<tr>
<td>contain</td>
<td>可视窗口完全包含网页内容（左图）。页面内容显示在<code>safe area</code>内。<code>viewport-fit:contain</code></td>
</tr>
<tr>
<td>cover</td>
<td>网页内容完全覆盖可视窗口（右图）。页面内容充满屏幕。<code>viewport-fit:cover</code></td>
</tr>
</tbody></table>
<h3 id="constant-函数"><a href="#constant-函数" class="headerlink" title="constant 函数"></a>constant 函数</h3><p>iOS11 新增特性，Webkit 的一个 CSS 函数，用于设定安全区域与边界的距离，有四个预定义的变量（单位是px）：</p>
<ul>
<li><code>safe-area-inset-left</code>：安全区域距离左边界距离</li>
<li><code>safe-area-inset-right</code>：安全区域距离右边界距离</li>
<li><code>safe-area-inset-top</code>：安全区域距离顶部边界距离</li>
<li><code>safe-area-inset-bottom</code>：安全区域距离底部边界距离</li>
</ul>
<p><strong>注意</strong>：网页默认不添加扩展的表现是 viewport-fit=contain，需要适配 iPhoneX 必须设置 <font color=red>viewport-fit=cover</font>，不然 <code>constant</code> 函数是不起作用的，这是适配的必要条件。</p>
<ul>
<li>官方文档中提到将来 <code>env()</code>要替换 <code>constant ()</code>，目前还不可用</li>
<li>这两个函数都是 webkit 中 css 函数，可以直接使用变量函数，只有在 webkit 内核下才支持</li>
<li><code>constant</code>：针对iOS &lt; 11.2以下系统 </li>
<li><code>env</code>：针对于iOS &gt;= 11.2的系统</li>
</ul>
<blockquote>
<p>注意：网页默认不添加扩展的表现是 <code>viewport-fit=contain</code>，需要适配 <code>iPhone</code> 必须设置<br><code>viewport-fit=cover</code>，<font color=red>这是适配的关键步骤</font>。</p>
</blockquote>
<h2 id="适配例子"><a href="#适配例子" class="headerlink" title="适配例子"></a>适配例子</h2><p>第一步：设置网页在可视窗口的布局方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&apos;viewport&apos;  content=&quot;width=device-width, viewport-fit=cover&quot;  /&gt;</span><br></pre></td></tr></table></figure>

<p>第二步：页面主体内容限定在安全区域内</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 适配齐刘海*/</span></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="built_in">constant</span>(safe-area-inset-top);  </span><br><span class="line"> <span class="comment">/* 适配底部黑条*/</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：fixed 元素的适配</p>
<ul>
<li>bottom 不是0的情况</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* bottom 不是0的情况 */</span></span><br><span class="line"><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="built_in">calc</span>(50px(原来的bottom值) + <span class="built_in">constant</span>(safe-area-inset-bottom));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>吸底的情况（bottom=0）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 方法1 ：设置内边距 扩展高度*/</span></span><br><span class="line"><span class="comment">/* 这个方案需要吸底条必须是有背景色的，因为扩展的部分背景是跟随外容器的，否则出现镂空情况。*/</span></span><br><span class="line"><span class="selector-class">.fix</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 直接扩展高度*/</span></span><br><span class="line"><span class="selector-class">.fix</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(60px(原来的高度值) + <span class="built_in">constant</span>(safe-area-inset-bottom));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法2 ：在元素下面用一个空div填充， 但是背景色要一致 */</span></span><br><span class="line"><span class="selector-class">.blank</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 吸底元素样式 */</span></span><br><span class="line"><span class="selector-class">.fix</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>最后： 使用@supports</li>
</ul>
<p>因为只有有齐刘海和底部黑条的机型才需要适配样式，可以用@support配合使用：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">supports</span> (bottom: constant(safe-area-inset-bottom)) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="完整检测代码"><a href="#完整检测代码" class="headerlink" title="完整检测代码"></a>完整检测代码</h3><ul>
<li><strong>@supports隔离兼容模式</strong></li>
</ul>
<p>因为只有有齐刘海和底部黑条的机型才需要适配样式，可以用@support配合使用：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@mixin</span> iphonex-css &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: constant(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-top</span>: env(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-left</span>: constant(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-left</span>: env(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: constant(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: env(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: constant(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: env(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@mixin</span> iphonex-support &#123;</span><br><span class="line">  <span class="keyword">@supports</span> (<span class="attribute">bottom</span>: constant(safe-area-inset-top)) or (<span class="attribute">bottom</span>: env(safe-area-inset-top)) &#123;</span><br><span class="line">    <span class="selector-tag">body</span><span class="selector-class">.iphonex</span> &#123;</span><br><span class="line">      <span class="variable">@include</span> iphonex-css;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@media 媒体查询</strong></li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@mixin</span> iphonex-css &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: constant(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-top</span>: env(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-left</span>: constant(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-left</span>: env(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: constant(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: env(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: constant(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: env(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iphonex 适配 */</span></span><br><span class="line"><span class="variable">@mixin</span> iphonex-media &#123;</span><br><span class="line">  <span class="keyword">@media</span> only screen and (<span class="attribute">device-width</span>: <span class="number">375px</span>) and (<span class="attribute">device-height</span>: <span class="number">812px</span>) and (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span><span class="selector-class">.iphonex</span> &#123;</span><br><span class="line">      <span class="variable">@include</span> iphonex-css;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="注意项"><a href="#注意项" class="headerlink" title="注意项"></a>注意项</h3><ul>
<li>&ensp;&ensp;<code>env</code> 和 <code>constant</code> 只有在 <code>viewport-fit=cover</code> 时候才能生效, 上面使用的safari 的控制台可以检测模拟器中网页开启web inspector.</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>page</title>
    <url>/2019/10/23/Tue%20Oct%2022%202019%2016:09:13%20GMT+0800%20(CST)/</url>
    <content><![CDATA[<h2 id="一-Hexo搭建…1"><a href="#一-Hexo搭建…1" class="headerlink" title="一, Hexo搭建…1"></a>一, Hexo搭建…1</h2><h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1, 安装 Node.js"></a>1, 安装 Node.js</h3><p>打开 Node （中文官网）Node（英文官网）<br>（此处打开的是英文官网）<br>安装步骤非常简单，一直next，下一步就可以了，默认安装就行。</p>
<h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2, 安装 Git"></a>2, 安装 Git</h3><p>打开 Git 官网<br>（此处下载的为Mac OS X版本，Windows同理）<br>安装步骤也依旧非常简单，一直下一步。默认安装就行了</p>
<a id="more"></a>

<h3 id="3-安装-hexo"><a href="#3-安装-hexo" class="headerlink" title="3, 安装 hexo"></a>3, 安装 hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. `sudo su` # 切换至root用户</span><br><span class="line"></span><br><span class="line">2. `node -v` #（查看node版本）</span><br><span class="line"></span><br><span class="line">3. `npm -v` #（查看npm版本）</span><br><span class="line"></span><br><span class="line">4. `npm install -g cnpm --registry=https://registry.npm.taobao.org` #（安装淘宝镜像源）</span><br><span class="line"></span><br><span class="line">5. `cnpm -v` #（查看cnpm版本）</span><br><span class="line"></span><br><span class="line">6. `cnpm install -g hexo-cli` #（全局安装hexo博客）</span><br><span class="line"></span><br><span class="line">7. `hexo -v` #（验证是否安装成功）</span><br><span class="line"></span><br><span class="line">8.  新建一个空文件夹(mkdir blog)（blog）进入这个文件夹，后面一切hexo操作都在blog这个文件夹里操作</span><br><span class="line"></span><br><span class="line">9. `sudo hexo init`（初始化一个hexo博客）（看见这个即安装完成）Start blogging with Hexo!</span><br><span class="line">  </span><br><span class="line">10. `npm install` # 安装必备的组件</span><br><span class="line"></span><br><span class="line">11. `hexo g` # 生成静态网页</span><br><span class="line"></span><br><span class="line">12. `hexo s` #（启动本地服务器）</span><br></pre></td></tr></table></figure>

<h4 id="经常用到的几个-hexo-命令：（上传Git服务器之前操作）"><a href="#经常用到的几个-hexo-命令：（上传Git服务器之前操作）" class="headerlink" title="经常用到的几个 hexo 命令：（上传Git服务器之前操作）"></a>经常用到的几个 hexo 命令：（上传Git服务器之前操作）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean  # 用来清理缓存文件</span><br><span class="line">hexo  g     # 生成文件</span><br><span class="line">hexo  s     # 运行本地服务器</span><br><span class="line">hexo  d     # 上传到服务器</span><br></pre></td></tr></table></figure>

<h2 id="二-部署（GitHub）"><a href="#二-部署（GitHub）" class="headerlink" title="二, 部署（GitHub）"></a>二, 部署（GitHub）</h2><h3 id="1-打开GitHub"><a href="#1-打开GitHub" class="headerlink" title="1, 打开GitHub"></a>1, 打开GitHub</h3><h3 id="2-新建一个GitHub仓库项目"><a href="#2-新建一个GitHub仓库项目" class="headerlink" title="2, 新建一个GitHub仓库项目"></a>2, 新建一个GitHub仓库项目</h3><h3 id="3-用户部署个人博客的GitHub仓库的命名必须符合特定要求才行（昵称用户名一致）（oliver556-github-io）"><a href="#3-用户部署个人博客的GitHub仓库的命名必须符合特定要求才行（昵称用户名一致）（oliver556-github-io）" class="headerlink" title="3, 用户部署个人博客的GitHub仓库的命名必须符合特定要求才行（昵称用户名一致）（oliver556.github.io）"></a>3, 用户部署个人博客的GitHub仓库的命名必须符合特定要求才行（昵称用户名一致）（oliver556.github.io）</h3><h3 id="4-git部署插件"><a href="#4-git部署插件" class="headerlink" title="4, git部署插件"></a>4, git部署插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h3 id="5-进入hexo-的-config-yml文件夹"><a href="#5-进入hexo-的-config-yml文件夹" class="headerlink" title="5, 进入hexo 的 _config.yml文件夹"></a>5, 进入hexo 的 _config.yml文件夹</h3><p>找到# Deployment</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Deployment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/oliver556/oliver556.github.io.git #仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="6-hexo-d（部署，上传到服务器）"><a href="#6-hexo-d（部署，上传到服务器）" class="headerlink" title="6, hexo d（部署，上传到服务器）"></a>6, hexo d（部署，上传到服务器）</h3><p>输入自己的GitHub账号，密码（即可完成）</p>
<h2 id="三-自定义主题"><a href="#三-自定义主题" class="headerlink" title="三, 自定义主题"></a>三, 自定义主题</h2><h3 id="yilia主题-GitHub上用的人比较多的一个主题"><a href="#yilia主题-GitHub上用的人比较多的一个主题" class="headerlink" title="yilia主题 GitHub上用的人比较多的一个主题"></a>yilia主题 GitHub上用的人比较多的一个主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. # 安装下载主题</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br><span class="line">2. 修改hexo根目录下的 _config.yml ： theme: yilia</span><br><span class="line">3. hexo clean</span><br><span class="line">4. hexo g</span><br><span class="line">5. hexo s</span><br><span class="line">6. hexo d</span><br></pre></td></tr></table></figure>

<h2 id="四-github-pages-阿里云域名绑定搭建个人博客"><a href="#四-github-pages-阿里云域名绑定搭建个人博客" class="headerlink" title="四, github pages+阿里云域名绑定搭建个人博客"></a>四, github pages+阿里云域名绑定搭建个人博客</h2><blockquote>
<p>参考文献 <a href="https://github.com/HuYuee/blog/issues/13" target="_blank" rel="noopener">HuYuee.GitHub</a></p>
</blockquote>
<h3 id="1-获取github-pages的ip地址"><a href="#1-获取github-pages的ip地址" class="headerlink" title="1, 获取github pages的ip地址"></a>1, 获取github pages的ip地址</h3><p>打开你的电脑的命令行工具，ping你的github地址，忽略“/”后面的路径，比如我的github pages地址是oliver556.github.io，那么我需要ping的地址就是oliver556.github.io，如下图：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/283395/1571709921883-816fce81-6912-433d-9ec7-6d29b312447e.png" alt=" "></p>
<p>我得到了我的github pages的ip地址：185.199.111.153</p>
<h3 id="2-配置阿里云域名解析"><a href="#2-配置阿里云域名解析" class="headerlink" title="2, 配置阿里云域名解析"></a>2, 配置阿里云域名解析</h3><p>进入你的阿里云的解析域名列表，选择你想要解析的域名，点击后面的解析。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/283395/1571709968740-b6e55bb3-044b-4d68-be15-7bc539f52617.png?x-oss-process=image/resize,w_746" alt=" "></p>
<p>然后点击添加解析，因为我的ip地址是151.101.100.133，所以我添加了两条解析记录。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/283395/1571709984673-c5f8ff62-a518-4f87-b65a-f213348328df.png?x-oss-process=image/resize,w_746" alt=" "></p>
<h3 id="3-配置github-pages的custom-domain"><a href="#3-配置github-pages的custom-domain" class="headerlink" title="3, 配置github pages的custom domain"></a>3, 配置github pages的custom domain</h3><p>进入你的github pages的仓库，然后在设置里面将的你的域名的地址，添加到custom domain中，然后保存即可。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/283395/1571710004690-3c267fc2-d008-4e95-9c99-b415b9925e6b.png?x-oss-process=image/resize,w_746" alt=" "></p>
<p>设置到这个地方，你现在访问你的域名地址，比如我的是<a href="http://www.huyuee.com。就能看到你的github" target="_blank" rel="noopener">www.huyuee.com。就能看到你的github</a> pages了！</p>
<p>连接Github与本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "oliver556"</span><br><span class="line">git config --global user.email "oliver556@163.com"</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><ul>
<li><a href="https://www.youtube.com/watch?v=erKYtw4Rfhk&t=1018s" target="_blank" rel="noopener">YouTube</a></li>
<li><a href="https://www.bilibili.com/video/av44544186?from=search&seid=1621519341015391579" target="_blank" rel="noopener">B站</a></li>
<li><a href="https://www.jianshu.com/p/63edbb08bd5f" target="_blank" rel="noopener">生成公钥</a></li>
<li><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-8" target="_blank" rel="noopener">超详细Hexo+GitHub博客搭建小白教程</a></li>
</ul>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>/hello-world</title>
    <url>/2019/10/23//hello-world/</url>
    <content><![CDATA[<hr>
<p>title: Hello World<br>permalink: hello-world—</p>
<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2019/10/23/Tue%20Oct%2022%202019%2015:09:10%20GMT+0800%20(CST)/</url>
    <content><![CDATA[<h2 id="一-Hexo搭建…"><a href="#一-Hexo搭建…" class="headerlink" title="一, Hexo搭建…"></a>一, Hexo搭建…</h2><p><code>npm run dev</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-安装-Node-js"><a href="#1-安装-Node-js" class="headerlink" title="1, 安装 Node.js"></a>1, 安装 Node.js</h3><p>打开 Node （中文官网）Node（英文官网）<br>（此处打开的是英文官网）<br>安装步骤非常简单，一直next，下一步就可以了，默认安装就行。</p>
<a id="more"></a>

<h3 id="2-安装-Git"><a href="#2-安装-Git" class="headerlink" title="2, 安装 Git"></a>2, 安装 Git</h3><p>打开 Git 官网<br>（此处下载的为Mac OS X版本，Windows同理）<br>安装步骤也依旧非常简单，一直下一步。默认安装就行了</p>
<h3 id="3-安装-hexo"><a href="#3-安装-hexo" class="headerlink" title="3, 安装 hexo"></a>3, 安装 hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. `sudo su` # 切换至root用户</span><br><span class="line"></span><br><span class="line">2. `node -v` #（查看node版本）</span><br><span class="line"></span><br><span class="line">3. `npm -v` #（查看npm版本）</span><br><span class="line"></span><br><span class="line">4. `npm install -g cnpm --registry=https://registry.npm.taobao.org` #（安装淘宝镜像源）</span><br><span class="line"></span><br><span class="line">5. `cnpm -v` #（查看cnpm版本）</span><br><span class="line"></span><br><span class="line">6. `cnpm install -g hexo-cli` #（全局安装hexo博客）</span><br><span class="line"></span><br><span class="line">7. `hexo -v` #（验证是否安装成功）</span><br><span class="line"></span><br><span class="line">8.  新建一个空文件夹(mkdir blog)（blog）进入这个文件夹，后面一切hexo操作都在blog这个文件夹里操作</span><br><span class="line"></span><br><span class="line">9. `sudo hexo init`（初始化一个hexo博客）（看见这个即安装完成）Start blogging with Hexo!</span><br><span class="line">  </span><br><span class="line">10. `npm install` # 安装必备的组件</span><br><span class="line"></span><br><span class="line">11. `hexo g` # 生成静态网页</span><br><span class="line"></span><br><span class="line">12. `hexo s` #（启动本地服务器）</span><br></pre></td></tr></table></figure>

<h4 id="经常用到的几个-hexo-命令：（上传Git服务器之前操作）"><a href="#经常用到的几个-hexo-命令：（上传Git服务器之前操作）" class="headerlink" title="经常用到的几个 hexo 命令：（上传Git服务器之前操作）"></a>经常用到的几个 hexo 命令：（上传Git服务器之前操作）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean  # 用来清理缓存文件</span><br><span class="line">hexo  g     # 生成文件</span><br><span class="line">hexo  s     # 运行本地服务器</span><br><span class="line">hexo  d     # 上传到服务器</span><br></pre></td></tr></table></figure>

<h2 id="二-部署（GitHub）"><a href="#二-部署（GitHub）" class="headerlink" title="二, 部署（GitHub）"></a>二, 部署（GitHub）</h2><h3 id="1-打开GitHub"><a href="#1-打开GitHub" class="headerlink" title="1, 打开GitHub"></a>1, 打开GitHub</h3><h3 id="2-新建一个GitHub仓库项目"><a href="#2-新建一个GitHub仓库项目" class="headerlink" title="2, 新建一个GitHub仓库项目"></a>2, 新建一个GitHub仓库项目</h3><h3 id="3-用户部署个人博客的GitHub仓库的命名必须符合特定要求才行（昵称用户名一致）（oliver556-github-io）"><a href="#3-用户部署个人博客的GitHub仓库的命名必须符合特定要求才行（昵称用户名一致）（oliver556-github-io）" class="headerlink" title="3, 用户部署个人博客的GitHub仓库的命名必须符合特定要求才行（昵称用户名一致）（oliver556.github.io）"></a>3, 用户部署个人博客的GitHub仓库的命名必须符合特定要求才行（昵称用户名一致）（oliver556.github.io）</h3><h3 id="4-git部署插件"><a href="#4-git部署插件" class="headerlink" title="4, git部署插件"></a>4, git部署插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h3 id="5-进入hexo-的-config-yml文件夹"><a href="#5-进入hexo-的-config-yml文件夹" class="headerlink" title="5, 进入hexo 的 _config.yml文件夹"></a>5, 进入hexo 的 _config.yml文件夹</h3><p>找到# Deployment</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Deployment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/oliver556/oliver556.github.io.git #仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="6-hexo-d（部署，上传到服务器）"><a href="#6-hexo-d（部署，上传到服务器）" class="headerlink" title="6, hexo d（部署，上传到服务器）"></a>6, hexo d（部署，上传到服务器）</h3><p>输入自己的GitHub账号，密码（即可完成）</p>
<h2 id="三-自定义主题"><a href="#三-自定义主题" class="headerlink" title="三, 自定义主题"></a>三, 自定义主题</h2><h3 id="yilia主题-GitHub上用的人比较多的一个主题"><a href="#yilia主题-GitHub上用的人比较多的一个主题" class="headerlink" title="yilia主题 GitHub上用的人比较多的一个主题"></a>yilia主题 GitHub上用的人比较多的一个主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. # 安装下载主题</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br><span class="line">2. 修改hexo根目录下的 _config.yml ： theme: yilia</span><br><span class="line">3. hexo clean</span><br><span class="line">4. hexo g</span><br><span class="line">5. hexo s</span><br><span class="line">6. hexo d</span><br></pre></td></tr></table></figure>

<h2 id="四-github-pages-阿里云域名绑定搭建个人博客"><a href="#四-github-pages-阿里云域名绑定搭建个人博客" class="headerlink" title="四, github pages+阿里云域名绑定搭建个人博客"></a>四, github pages+阿里云域名绑定搭建个人博客</h2><blockquote>
<p>参考文献 <a href="https://github.com/HuYuee/blog/issues/13" target="_blank" rel="noopener">HuYuee.GitHub</a></p>
</blockquote>
<h3 id="获取github-pages的ip地址"><a href="#获取github-pages的ip地址" class="headerlink" title="获取github pages的ip地址"></a>获取github pages的ip地址</h3><p>打开你的电脑的命令行工具，ping你的github地址，忽略“/”后面的路径，比如我的github pages地址是oliver556.github.io，那么我需要ping的地址就是oliver556.github.io，如下图：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/283395/1571709921883-816fce81-6912-433d-9ec7-6d29b312447e.png" alt=" "></p>
<p>我得到了我的github pages的ip地址：185.199.111.153</p>
<h3 id="2-配置阿里云域名解析"><a href="#2-配置阿里云域名解析" class="headerlink" title="2, 配置阿里云域名解析"></a>2, 配置阿里云域名解析</h3><p>进入你的阿里云的解析域名列表，选择你想要解析的域名，点击后面的解析。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/283395/1571709968740-b6e55bb3-044b-4d68-be15-7bc539f52617.png?x-oss-process=image/resize,w_746" alt=" "></p>
<p>然后点击添加解析，因为我的ip地址是151.101.100.133，所以我添加了两条解析记录。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/283395/1571709984673-c5f8ff62-a518-4f87-b65a-f213348328df.png?x-oss-process=image/resize,w_746" alt=" "></p>
<h3 id="3-配置github-pages的custom-domain"><a href="#3-配置github-pages的custom-domain" class="headerlink" title="3, 配置github pages的custom domain"></a>3, 配置github pages的custom domain</h3><p>进入你的github pages的仓库，然后在设置里面将的你的域名的地址，添加到custom domain中，然后保存即可。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/283395/1571710004690-3c267fc2-d008-4e95-9c99-b415b9925e6b.png?x-oss-process=image/resize,w_746" alt=" "></p>
<p>设置到这个地方，你现在访问你的域名地址，比如我的是 <code>www.huyuee.com</code>。就能看到你的github pages了！</p>
<p>连接Github与本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "oliver556"</span><br><span class="line">git config --global user.email "oliver556@163.com"</span><br></pre></td></tr></table></figure>

<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h2><ul>
<li><a href="https://www.youtube.com/watch?v=erKYtw4Rfhk&t=1018s" target="_blank" rel="noopener">YouTube</a></li>
<li><a href="https://www.bilibili.com/video/av44544186?from=search&seid=1621519341015391579" target="_blank" rel="noopener">B站</a></li>
<li><a href="https://www.jianshu.com/p/63edbb08bd5f" target="_blank" rel="noopener">生成公钥</a></li>
<li><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-8" target="_blank" rel="noopener">超详细Hexo+GitHub博客搭建小白教程</a></li>
</ul>
]]></content>
      <tags>
        <tag>tags</tag>
      </tags>
  </entry>
</search>
